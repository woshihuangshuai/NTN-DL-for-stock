
# currently support only agenda
MVT_TAGGER_IMPL = agenda_mvt

# currently support nivre, combined implementations (other implementations are not generalized)
MVT_DEPPARSER_IMPL = arceager-mvt-origin
MVT_DEPPARSER_LABELED = true
# current naive
#MVT_DEPLABELER_IMPL = naive
# currently support sr implementations 
MVT_CONPARSER_IMPL = cad-mvt
#MVT_CONPARSER_D = -DMVT_CONLABEL_SIZE=12

#===================================================================

SRC_MVT = $(SRC_DIR)/chinese

SRC_MVT_TAGGER = $(SRC_CHINESE)/tagger
DIST_MVT_TAGGER = $(DIST_DIR)/mvt.postagger
OBJECT_MVT_TAGGER = $(OBJECT_DIR)/mvt.postagger
$(DIST_MVT_TAGGER):
	$(MKDIR) $(DIST_MVT_TAGGER)
$(OBJECT_MVT_TAGGER):
	$(MKDIR) $(OBJECT_MVT_TAGGER)

SRC_MVT_DEPPARSER = $(SRC_COMMON)/depparser
DIST_MVT_DEPPARSER = $(DIST_DIR)/mvt.depparser
OBJECT_MVT_DEPPARSER = $(OBJECT_DIR)/mvt.depparser
ifeq ($(MVT_DEPPARSER_LABELED), true)
	MVT_DEPPARSER_D = -DLABELED
endif
$(DIST_MVT_DEPPARSER):
	$(MKDIR) $(DIST_MVT_DEPPARSER)
$(OBJECT_MVT_DEPPARSER):
	$(MKDIR) $(OBJECT_MVT_DEPPARSER)

# ifeq ($(MVT_DEPPARSER_IMPL), combined)
# 	MVT_DEPPARSER_D := $(MVT_DEPPARSER_D) -DCOMBINED
# 	MVT_DEPPARSER_IMPL = nivre
# endif

SRC_MVT_CONPARSER = $(SRC_COMMON_CONPARSER)
DIST_MVT_CONPARSER = $(DIST_DIR)/mvt.conparser
OBJECT_MVT_CONPARSER = $(OBJECT_DIR)/mvt.conparser

$(DIST_MVT_CONPARSER):
	$(MKDIR) $(DIST_MVT_CONPARSER)
$(OBJECT_MVT_CONPARSER):
	$(MKDIR) $(OBJECT_MVT_CONPARSER)	

#===================================================================

# # the partofspeech
# $(OBJECT_DIR)/pos.mvt.o: $(SRC_MVT)/tags.h $(SRC_MVT)/pos/mvt.h $(SRC_MVT)/pos/mvt.cpp
# 	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -c $(SRC_MVT)/pos/mvt.cpp -o $@

# the dependency label
# $(OBJECT_DIR)/deplabel.mvt.o: $(SRC_MVT)/dependency/label/mvt.h $(SRC_MVT)/dependency/label/mvt.cpp
# 	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -c $(SRC_MVT)/dependency/label/mvt.cpp -o $@
# 
# # the constituent label
# $(OBJECT_DIR)/cfg.mvt.o: $(SRC_MVT)/tags.h $(SRC_INCLUDES)/linguistics/cfg/mvt.h $(SRC_LIBS)/linguistics/cfg/mvt.cpp
# 	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -c $(SRC_LIBS)/linguistics/cfg/mvt.cpp -o $@
# 
# the constituent
$(OBJECT_DIR)/constituent.mvt.o: $(OBJECT_MVT_CONPARSER) $(SRC_MVT)/cfg.h $(SRC_INCLUDES)/linguistics/constituent.h $(SRC_LIBS)/linguistics/constituent.cpp
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -c $(SRC_LIBS)/linguistics/constituent.cpp -o $@

#===================================================================

mvt.postagger: $(OBJECT_DIR) $(DIST_DIR) $(OBJECT_MVT_TAGGER) $(DIST_MVT_TAGGER) $(DIST_MVT_TAGGER)/tagger $(DIST_MVT_TAGGER)/train
	@echo The generic part-of-speech tagging system is compiled successfully into $(DIST_MVT_TAGGER).

# the weight module
$(OBJECT_MVT_TAGGER)/weight.o: $(OBJECT_MVT_TAGGER) $(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL)/weight.h $(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL)/weight.cpp  $(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL)/impl_include.h $(SRC_CHINESE)/tags.h ./Makefile
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_MVT_TAGGER) -I$(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL) -c $(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL)/weight.cpp -o $(OBJECT_MVT_TAGGER)/weight.o

# the tagging object
$(OBJECT_DIR)/mvt.postagger.o: $(SRC_INCLUDES)/hash.h $(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL)/tagger.h $(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL)/tagger.cpp $(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL)/weight.h $(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL)/weight.cpp ./Makefile
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_MVT_TAGGER) -I$(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL) -c $(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL)/tagger.cpp -o $(OBJECT_DIR)/mvt.postagger.o

# the main executable file
$(DIST_MVT_TAGGER)/tagger: $(SRC_MVT_TAGGER)/main.cpp $(OBJECT_DIR)/mvt.postagger.o $(OBJECT_MVT_TAGGER)/weight.o $(OBJECTS) 
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_MVT_TAGGER) -I$(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL) -c $(SRC_MVT_TAGGER)/main.cpp -o $(OBJECT_MVT_TAGGER)/main.o
	$(LD) $(LDFLAGS) -o $(DIST_MVT_TAGGER)/tagger $(OBJECT_DIR)/mvt.postagger.o $(OBJECT_MVT_TAGGER)/weight.o $(OBJECT_MVT_TAGGER)/main.o $(OBJECTS)

# the trainer for generic pos tagging
$(DIST_MVT_TAGGER)/train: $(SRC_MVT_TAGGER)/train.cpp $(OBJECT_DIR)/mvt.postagger.o $(OBJECT_MVT_TAGGER)/weight.o $(OBJECTS) 
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_MVT_TAGGER) -I$(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL) -c $(SRC_MVT_TAGGER)/train.cpp -o $(OBJECT_MVT_TAGGER)/train.o
	$(LD) $(LDFLAGS) -o $(DIST_MVT_TAGGER)/train $(OBJECT_DIR)/mvt.postagger.o $(OBJECT_MVT_TAGGER)/weight.o $(OBJECT_MVT_TAGGER)/train.o $(OBJECTS)

#===================================================================


mvt.depparser: $(OBJECT_DIR) $(DIST_DIR) $(OBJECT_MVT_DEPPARSER) $(DIST_MVT_DEPPARSER) $(DIST_MVT_DEPPARSER)/depparser $(DIST_MVT_DEPPARSER)/train
	@echo The generic dependency parser system is compiled successfully into $(DIST_MVT_DEPPARSER).

# the weight module
$(OBJECT_MVT_DEPPARSER)/weight.o: $(OBJECT_MVT_DEPPARSER) $(SRC_MVT_DEPPARSER)/depparser_weight_base.h $(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL)/depparser_weight.h $(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL)/depparser_weight.cpp ./Makefile
	$(CXX) $(CXXFLAGS) $(MVT_DEPPARSER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_MVT_DEPPARSER) -I$(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL) -c $(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL)/depparser_weight.cpp -o $(OBJECT_MVT_DEPPARSER)/weight.o

# the depparser object
$(OBJECT_DIR)/mvt.depparser.o: $(SRC_INCLUDES)/hash.h $(SRC_MVT_DEPPARSER)/depparser_base.h $(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL)/depparser.h $(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL)/depparser.cpp $(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL)/depparser_macros.h $(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL)/state.h ./Makefile
	$(CXX) $(CXXFLAGS) $(MVT_DEPPARSER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_MVT_DEPPARSER) -I$(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL) -c $(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL)/depparser.cpp -o $(OBJECT_DIR)/mvt.depparser.o

# the main executable
$(DIST_MVT_DEPPARSER)/depparser: $(SRC_MVT_DEPPARSER)/main.cpp $(OBJECT_DIR)/mvt.depparser.o $(OBJECT_MVT_DEPPARSER)/weight.o $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(MVT_DEPPARSER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_MVT_DEPPARSER) -I$(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL) -c $(SRC_MVT_DEPPARSER)/main.cpp -o $(OBJECT_MVT_DEPPARSER)/main.o
	$(LD) $(LDFLAGS) -o $(DIST_MVT_DEPPARSER)/depparser $(OBJECT_DIR)/mvt.depparser.o $(OBJECT_MVT_DEPPARSER)/weight.o $(OBJECT_MVT_DEPPARSER)/main.o $(OBJECTS)

# the trainer for depparser
$(DIST_MVT_DEPPARSER)/train: $(SRC_MVT_DEPPARSER)/train.cpp $(OBJECT_DIR)/mvt.depparser.o $(OBJECT_MVT_DEPPARSER)/weight.o $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(MVT_DEPPARSER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_MVT_DEPPARSER) -I$(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL) -c $(SRC_MVT_DEPPARSER)/train.cpp -o $(OBJECT_MVT_DEPPARSER)/train.o
	$(LD) $(LDFLAGS) -o $(DIST_MVT_DEPPARSER)/train $(OBJECT_DIR)/mvt.depparser.o $(OBJECT_MVT_DEPPARSER)/weight.o $(OBJECT_MVT_DEPPARSER)/train.o $(OBJECTS)

#===================================================================


mvt.conparser: $(OBJECT_DIR) $(DIST_DIR) $(OBJECT_MVT_CONPARSER) $(DIST_MVT_CONPARSER) $(DIST_MVT_CONPARSER)/conparser $(DIST_MVT_CONPARSER)/train 
	@echo The generic constituent parser system is compiled successfully into $(DIST_MVT_CONPARSER).

# the weight module
$(OBJECT_MVT_CONPARSER)/weight.o: $(SRC_COMMON_CONPARSER)/weight_base.h $(SRC_COMMON_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL)/weight.h $(SRC_COMMON_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL)/weight.cpp ./Makefile
	$(CXX) $(CXXFLAGS) $(MVT_CONPARSER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_COMMON_CONPARSER) -I$(SRC_COMMON_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL) -c $(SRC_COMMON_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL)/weight.cpp -o $(OBJECT_MVT_CONPARSER)/weight.o

# the conparser object
$(OBJECT_DIR)/mvt.conparser.o: $(SRC_INCLUDES)/linguistics/constituent.h $(SRC_INCLUDES)/hash.h $(SRC_COMMON_CONPARSER)/conparser_base.h $(SRC_COMMON_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL)/conparser.h $(SRC_COMMON_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL)/conparser.cpp $(SRC_COMMON_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL)/stateitem.h $(SRC_COMMON_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL)/rule.h ./Makefile
	$(CXX) $(CXXFLAGS) $(MVT_CONPARSER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_COMMON_CONPARSER) -I$(SRC_COMMON_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL) -c $(SRC_COMMON_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL)/conparser.cpp -o $(OBJECT_DIR)/mvt.conparser.o

# the main executable
$(DIST_MVT_CONPARSER)/conparser: $(SRC_MVT_CONPARSER)/main.cpp $(OBJECT_DIR)/mvt.conparser.o $(OBJECT_MVT_CONPARSER)/weight.o $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(MVT_CONPARSER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_MVT_CONPARSER) -I$(SRC_MVT_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL) -c $(SRC_MVT_CONPARSER)/main.cpp -o $(OBJECT_MVT_CONPARSER)/main.o
	$(LD) $(LDFLAGS) -o $(DIST_MVT_CONPARSER)/conparser $(OBJECT_DIR)/mvt.conparser.o $(OBJECT_MVT_CONPARSER)/weight.o $(OBJECT_MVT_CONPARSER)/main.o $(OBJECTS)

# the trainer for conparser
$(DIST_MVT_CONPARSER)/train: $(SRC_MVT_CONPARSER)/train.cpp $(OBJECT_DIR)/mvt.conparser.o $(OBJECT_MVT_CONPARSER)/weight.o $(OBJECTS) 
	$(CXX) $(CXXFLAGS) $(MVT_CONPARSER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_MVT_CONPARSER) -I$(SRC_MVT_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL) -c $(SRC_MVT_CONPARSER)/train.cpp -o $(OBJECT_MVT_CONPARSER)/train.o
	$(LD) $(LDFLAGS) -o $(DIST_MVT_CONPARSER)/train $(OBJECT_DIR)/mvt.conparser.o $(OBJECT_MVT_CONPARSER)/weight.o $(OBJECT_MVT_CONPARSER)/train.o $(OBJECTS)

#===================================================================

# SRC_MVT_DEPLABELER = $(SRC_COMMON_DEPLABELER)
# DIST_MVT_DEPLABELER = $(DIST_DIR)/mvt.deplabeler
# OBJECT_MVT_DEPLABELER = $(OBJECT_DIR)/mvt.deplabeler

# $(DIST_MVT_DEPLABELER):
# 	$(MKDIR) $(DIST_MVT_DEPLABELER)
# $(OBJECT_MVT_DEPLABELER):
# 	$(MKDIR) $(OBJECT_MVT_DEPLABELER)
# mvt.deplabeler: $(OBJECT_DIR) $(DIST_DIR) $(OBJECT_MVT_DEPLABELER) $(DIST_MVT_DEPLABELER) $(DIST_MVT_DEPLABELER)/deplabeler $(DIST_MVT_DEPLABELER)/train
# 	@echo The generic dependency labeler system is compiled successfully into $(DIST_MVT_DEPLABELER).
# 
# # the weight module
# $(OBJECT_MVT_DEPLABELER)/weight.o: $(OBJECT_MVT_DEPLABELER) $(SRC_COMMON_DEPLABELER)/weight_base.h $(SRC_COMMON_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL)/weight.h $(SRC_COMMON_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL)/weight.cpp ./Makefile
# 	$(CXX) $(CXXFLAGS) $(MVT_DEPLABELER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_COMMON_DEPLABELER) -I$(SRC_COMMON_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL) -c $(SRC_COMMON_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL)/weight.cpp -o $(OBJECT_MVT_DEPLABELER)/weight.o
# 
# # the deplabeler object
# $(OBJECT_DIR)/mvt.deplabeler.o: $(SRC_INCLUDES)/hash.h $(SRC_COMMON_DEPLABELER)/deplabeler_base.h $(SRC_COMMON_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL)/deplabeler.h $(SRC_COMMON_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL)/deplabeler.cpp ./Makefile
# 	$(CXX) $(CXXFLAGS) $(MVT_DEPLABELER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_COMMON_DEPLABELER) -I$(SRC_COMMON_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL) -c $(SRC_COMMON_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL)/deplabeler.cpp -o $(OBJECT_DIR)/mvt.deplabeler.o
# 
# # the main executable
# $(DIST_MVT_DEPLABELER)/deplabeler: $(SRC_COMMON_DEPLABELER)/main.cpp  $(OBJECT_DIR)/mvt.deplabeler.o $(OBJECT_MVT_DEPLABELER)/weight.o $(OBJECTS)
# 	$(CXX) $(CXXFLAGS) $(MVT_DEPLABELER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_COMMON_DEPLABELER) -I$(SRC_COMMON_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL) -c $(SRC_COMMON_DEPLABELER)/main.cpp -o $(OBJECT_MVT_DEPLABELER)/main.o
# 	$(LD) $(LDFLAGS) -o $(DIST_MVT_DEPLABELER)/deplabeler $(OBJECT_DIR)/mvt.deplabeler.o $(OBJECT_MVT_DEPLABELER)/weight.o $(OBJECT_MVT_DEPLABELER)/main.o $(OBJECTS)
# 
# # the trainer for deplabeler
# $(DIST_MVT_DEPLABELER)/train: $(SRC_COMMON_DEPLABELER)/train.cpp $(OBJECT_DIR)/mvt.deplabeler.o $(OBJECT_MVT_DEPLABELER)/weight.o $(OBJECTS)
# 	$(CXX) $(CXXFLAGS) $(MVT_DEPLABELER_D) -DTARGET_LANGUAGE=chinese -I$(SRC_MVT) -I$(SRC_COMMON_DEPLABELER) -I$(SRC_COMMON_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL) -c $(SRC_COMMON_DEPLABELER)/train.cpp -o $(OBJECT_MVT_DEPLABELER)/train.o
# 	$(LD) $(LDFLAGS) -o $(DIST_MVT_DEPLABELER)/train $(OBJECT_DIR)/mvt.deplabeler.o $(OBJECT_MVT_DEPLABELER)/weight.o $(OBJECT_MVT_DEPLABELER)/train.o $(OBJECTS)


#===================================================================

zpar.mvt: $(OBJECT_DIR) $(DIST_DIR) $(OBJECT_DIR)/mvt.doc2snt.o $(OBJECT_DIR)/mvt.postagger.o $(OBJECT_MVT_TAGGER)/weight.o $(OBJECT_DIR)/mvt.conparser.o $(OBJECT_DIR)/constituent.mvt.o $(OBJECT_MVT_CONPARSER)/weight.o $(OBJECT_DIR)/mvt.depparser.o $(OBJECT_MVT_DEPPARSER)/weight.o $(OBJECTS)
	$(CXX) $(CXXFLAGS) -DTARGET_LANGUAGE=chinese $(MVT_DEPPARSER_D) -I$(SRC_MVT) -I$(SRC_MVT)/doc2snt -I$(SRC_MVT_TAGGER) -I$(SRC_INCLUDES)/linguistics -I$(SRC_LIBS)/linguistics -I$(SRC_MVT_TAGGER)/implementations/$(MVT_TAGGER_IMPL) -I$(SRC_MVT_CONPARSER) -I$(SRC_MVT_CONPARSER)/implementations/$(MVT_CONPARSER_IMPL) -I$(SRC_MVT_DEPPARSER) -I$(SRC_MVT_DEPPARSER)/implementations/$(MVT_DEPPARSER_IMPL) -I$(SRC_MVT_DEPLABELER) -I$(SRC_MVT_DEPLABELER)/implementations/$(MVT_DEPLABELER_IMPL) -c $(SRC_MVT)/zpar.mvt.cpp -o $(OBJECT_DIR)/zpar.mvt.o
	$(LD) $(LDFLAGS) -o $(DIST_DIR)/zpar.mvt $(OBJECT_DIR)/mvt.doc2snt.o $(OBJECT_DIR)/zpar.mvt.o $(OBJECT_DIR)/mvt.postagger.o $(OBJECT_MVT_TAGGER)/weight.o $(OBJECT_DIR)/mvt.conparser.o $(OBJECT_MVT_CONPARSER)/weight.o $(OBJECT_DIR)/mvt.depparser.o $(OBJECT_MVT_DEPPARSER)/weight.o $(OBJECTS)
	@echo The generic zpar.mvt system compiled successfully into $(DIST_DIR).

